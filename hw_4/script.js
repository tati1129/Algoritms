// 1. Реализовать алгоритм пузырьковой сортировки bubble sort
// 2. Произвести замер количества итераций 

let arrBubble = [5,6,8,5,6,4,15,6,1,8,7,9,6,85,6,8,5,6,4,15,6,1,8,7,9,6,85,6,8,5,6,4,15,6,1,8,7,9,6,85,6,8,5,6,4,15,6,1,8,7,9,6,85,6,8,5,6,4,15,6,1,8,7,9,6,85,6,8,5,6,4,15,6,1,8,7,9,6,85,6,8,5,6,4,15,6,1,8,7,9,6,85,6,8,5,6,4,15,6,1,8,7,9,6,85,6,8,5,6,4,15,6,1,8,7,9,6,85,6,8,5,6,4,15,6,1,8,7,9,6,85,6,8,5,6,4,15,6,1,8,7,9,6,85,6,8,5,6,4,15,6,1,8,7,9,6,85,6,8,5,6,4,15,6,1,8,7,9,6,85,6,8,5,6,4,15,6,1,8,7,9,6,85,6,8,5,6,4,15,6,1,8,7,9,6,85,6,8,5,6,4,15,6,1,8,7,9,6,85,6,8,5,6,4,15,6,1,8,7,9,6,85,6,8,5,6,4,15,6,1,8,7,9,6,85,6,8,5,6,4,15,6,1,8,7,9,6,85,6,8,5,6,4,15,6,1,8,7,9,6,85,6,8,5,6,4,15,6,1,8,7,9,6,85,6,8,5,6,4,15,6,1,8,7,9,6,85,6,8,5,6,4,15,6,1,8,7,9,6,85,6,8,5,6,4,15,6,1,8,7,9,6,85,6,8,5,6,4,15,6,1,8,7,9,6,85,6,8,5,6,4,15,6,1,8,7,9,6,85,6,8,5,6,4,15,6,1,8,7,9,6,85,6,8,5,6,4,15,6,1,8,7,9,6,85,6,8,5,6,4,15,6,1,8,7,9,6,85,6,8,5,6,4,15,6,1,8,7,9,6,85,6,8,5,6,4,15,6,1,8,7,9,6,85,6,8,5,6,4,15,6,1,8,7,9,6,85,6,8,5,6,4,15,6,1,8,7,9,6,85,6,8,5,6,4,15,6,1,8,7,9,6,85,6,8,5,6,4,15,6,1,8,7,9,6,85,6,8,5,6,4,15,6,1,8,7,9,6,85,6,8,5,6,4,15,6,1,8,7,9,6,85,6,8,5,6,4,15,6,1,8,7,9,6,85,6,8,5,6,4,15,6,1,8,7,9,6,85,6,8,5,6,4,15,6,1,8,7,9,6,85,6,8,5,6,4,15,6,1,8,7,9,6,85,6,8,5,6,4,15,6,1,8,7,9,6,85,6,8,5,6,4,15,6,1,8,7,9,6,85,6,8,5,6,4,15,6,1,8,7,9,6,85,6,8,5,6,4,15,6,1,8,7,9,6,85,6,8,5,6,4,15,6,1,8,7,9,6,85,6,8,5,6,4,15,6,1,8,7,9,6,85,6,8,5,6,4,15,6,1,8,7,9,6,85,6,8,5,6,4,15,6,1,8,7,9,6,85,6,8,5,6,4,15,6,1,8,7,9,6,85,6,8,5,6,4,15,6,1,8,7,9,6,85,6,8,5,6,4,15,6,1,8,7,9,6,85,6,8,5,6,4,15,6,1,8,7,9,6,85,6,8,5,6,4,15,6,1,8,7,9,6,8]


let arrMerge = [5,6,8,5,6,4,15,6,1,8,7,9,6,85,6,8,5,6,4,15,6,1,8,7,9,6,85,6,8,5,6,4,15,6,1,8,7,9,6,85,6,8,5,6,4,15,6,1,8,7,9,6,85,6,8,5,6,4,15,6,1,8,7,9,6,85,6,8,5,6,4,15,6,1,8,7,9,6,85,6,8,5,6,4,15,6,1,8,7,9,6,85,6,8,5,6,4,15,6,1,8,7,9,6,85,6,8,5,6,4,15,6,1,8,7,9,6,85,6,8,5,6,4,15,6,1,8,7,9,6,85,6,8,5,6,4,15,6,1,8,7,9,6,85,6,8,5,6,4,15,6,1,8,7,9,6,85,6,8,5,6,4,15,6,1,8,7,9,6,85,6,8,5,6,4,15,6,1,8,7,9,6,85,6,8,5,6,4,15,6,1,8,7,9,6,85,6,8,5,6,4,15,6,1,8,7,9,6,85,6,8,5,6,4,15,6,1,8,7,9,6,85,6,8,5,6,4,15,6,1,8,7,9,6,85,6,8,5,6,4,15,6,1,8,7,9,6,85,6,8,5,6,4,15,6,1,8,7,9,6,85,6,8,5,6,4,15,6,1,8,7,9,6,85,6,8,5,6,4,15,6,1,8,7,9,6,85,6,8,5,6,4,15,6,1,8,7,9,6,85,6,8,5,6,4,15,6,1,8,7,9,6,85,6,8,5,6,4,15,6,1,8,7,9,6,85,6,8,5,6,4,15,6,1,8,7,9,6,85,6,8,5,6,4,15,6,1,8,7,9,6,85,6,8,5,6,4,15,6,1,8,7,9,6,85,6,8,5,6,4,15,6,1,8,7,9,6,85,6,8,5,6,4,15,6,1,8,7,9,6,85,6,8,5,6,4,15,6,1,8,7,9,6,85,6,8,5,6,4,15,6,1,8,7,9,6,85,6,8,5,6,4,15,6,1,8,7,9,6,85,6,8,5,6,4,15,6,1,8,7,9,6,85,6,8,5,6,4,15,6,1,8,7,9,6,85,6,8,5,6,4,15,6,1,8,7,9,6,85,6,8,5,6,4,15,6,1,8,7,9,6,85,6,8,5,6,4,15,6,1,8,7,9,6,85,6,8,5,6,4,15,6,1,8,7,9,6,85,6,8,5,6,4,15,6,1,8,7,9,6,85,6,8,5,6,4,15,6,1,8,7,9,6,85,6,8,5,6,4,15,6,1,8,7,9,6,85,6,8,5,6,4,15,6,1,8,7,9,6,85,6,8,5,6,4,15,6,1,8,7,9,6,85,6,8,5,6,4,15,6,1,8,7,9,6,85,6,8,5,6,4,15,6,1,8,7,9,6,85,6,8,5,6,4,15,6,1,8,7,9,6,85,6,8,5,6,4,15,6,1,8,7,9,6,85,6,8,5,6,4,15,6,1,8,7,9,6,85,6,8,5,6,4,15,6,1,8,7,9,6,85,6,8,5,6,4,15,6,1,8,7,9,6,85,6,8,5,6,4,15,6,1,8,7,9,6,85,6,8,5,6,4,15,6,1,8,7,9,6,85,6,8,5,6,4,15,6,1,8,7,9,6,8]

console.log(arrMerge)



function bubbleSort(arr){
    let countBubble = 0;

    for(let i = 0;i<arr.length;i++){
        for(let j = 0;j<arr.length-i;j++){
            if(arr[j]>arr[j+1]){
                let tmp = arr[j]
                arr[j]=arr[j+1]
                arr[j+1]=tmp
            }
            countBubble++
        }
    }
    return countBubble
}





let countMerge = 0

function mergeSort(arr,left,rigth){
    if(left<rigth){
        let mid = Math.floor((left+rigth)/2);

        mergeSort(arr,left,mid);
        mergeSort(arr,mid+1,rigth);

        merge(arr,left,mid,rigth);
    }

}



function merge(arr,left,mid,rigth){
    let leftLength = mid+1-left;
    let rigthLength = rigth-mid;


    let leftArrTMP =[]
    let rigthArrTMP =[]

    for(let i = 0;i<leftLength;i++){
        leftArrTMP[i]=arr[left+i]
    }
    for(let i = 0;i<rigthLength;i++){
        rigthArrTMP[i]=arr[mid+1+i]
    }


    let i = 0;
    let j = 0;
    let k = left;

    while(i < leftArrTMP.length && j < rigthArrTMP.length){
        if(leftArrTMP[i]<rigthArrTMP[j]){
            arr[k]=leftArrTMP[i]
            i++
        }else{
            arr[k]=rigthArrTMP[j]
            j++
        }
        k++
    }

    while(i < leftArrTMP.length){
        arr[k]=leftArrTMP[i]
        i++
        k++
    }
    while(j < rigthArrTMP.length){
        arr[k]=rigthArrTMP[j]
        j++
        k++
    }
    countMerge++

}




// 3. Посчитать производительность в миллисекундах

// существенно разницу видно толькокогда массив очень большой как в примере


let bubbleStart = Date.now();
console.log(`количество иттераций для bubbleSort ${bubbleSort(arrBubble)}`)
let bubbleFinish = Date.now();
console.log(`bubbleSort виполнился за ${bubbleFinish-bubbleStart} милисекунд`) 

console.log(arrBubble)





let mergeStart = Date.now();
mergeSort(arrMerge,0,arrMerge.length-1)
let mergeFinish = Date.now();
console.log(`mergeSort виполнился за ${mergeFinish-mergeStart} милисекунд`)

console.log(countMerge)

console.log(arrMerge)